<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>总统套房</title>
    <link>https://juncham.github.io/</link>
    <description>Recent content on 总统套房</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 13 Jun 2020 22:19:44 +0800</lastBuildDate>
    
        <atom:link href="https://juncham.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://juncham.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://juncham.github.io/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;
&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>JQuery功能简要</title>
      <link>https://juncham.github.io/post/jquery%E5%8A%9F%E8%83%BD%E7%AE%80%E8%A6%81/</link>
      <pubDate>Sat, 13 Jun 2020 22:19:44 +0800</pubDate>
      
      <guid>https://juncham.github.io/post/jquery%E5%8A%9F%E8%83%BD%E7%AE%80%E8%A6%81/</guid>
      
        <description>&lt;h1 id=&#34;jquery的功能简要&#34;&gt;jQuery的功能简要&lt;/h1&gt;
&lt;p&gt;jQuery作为目前引用最广泛的库，也是寿命最长的库，有着很多优点，这里简要介绍一下它的一些功能。&lt;/p&gt;
&lt;h2 id=&#34;1jquery-如何获取元素&#34;&gt;1、jQuery 如何获取元素&lt;/h2&gt;
&lt;p&gt;通过元素的性质，例如id，class。例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;$(&amp;#34;p&amp;#34;)    //所有&amp;lt;p&amp;gt;元素
$(document)  //整个文档对象
$(&amp;#39;#myId&amp;#39;) //选择ID为myId的网页元素
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者以元素属性为基准，选择包含该属性或者是该属性值为“XX”的元素：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;$(&amp;#34;[href=&amp;#39;#&amp;#39;]&amp;#34;)
$(&amp;#39;div.myClass&amp;#39;)  //选择class为myClass的div元素
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2jquery-的链式操作是怎样的&#34;&gt;2、jQuery 的链式操作是怎样的&lt;/h2&gt;
&lt;p&gt;在选择网页元素进行操作后，return回到原来的api继续进行操作是jQuery方便优雅的一点。
通常需要在每个操作上加上return api或return this。如果需要考虑到返回当前api的前一个则需要加入相应的操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;$(&amp;#39;test&amp;#39;)        //对test操作
  .find(div3) //找到div3这个元素
  .add(blue) //对test加blue
  .end()        //退回到div3的前一个api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3jquery-如何创建元素&#34;&gt;3、jQuery 如何创建元素&lt;/h2&gt;
&lt;p&gt;jQuery创建新元素只要把新元素传入jQuery的构造函数即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;append()   //在被选元素的结尾插入内容
prepend() //在被选元素的开头插入内容
after()       //在被选元素之后插入内容
before()    //在被选元素之前插入内容
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4jquery-如何移动元素&#34;&gt;4、jQuery 如何移动元素&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;.insertAfter()和.after()         //在现存元素的外部，从后面插入元素
.insertBefore()和.before()   //在现存元素的外部，从前面插入元素
.appendTo()和.append()    //在现存元素的内部，从后面插入元素
.prependTo()和.prepend() //在现存元素的内部，从前面插入元素
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$(&amp;lsquo;test&amp;rsquo;).inserttAfter(&amp;lsquo;p&amp;rsquo;)和$(&amp;lsquo;p&amp;rsquo;).after(&amp;lsquo;test&amp;rsquo;)&lt;/p&gt;
&lt;p&gt;两者作用相同，都是将test移动到p后面，区别在于返回的都是前一个括号里面的元素。&lt;/p&gt;
&lt;h2 id=&#34;5jquery-如何修改元素的属性&#34;&gt;5、jQuery 如何修改元素的属性&lt;/h2&gt;
&lt;p&gt;$(selector).attr(attribute,value)  // 取出或设置某个属性的值，attribute：对应各属性，vlaue对应的属性值。&lt;/p&gt;
&lt;p&gt;具体的可以参考阮一峰的&lt;a href=&#34;http://www.ruanyifeng.com/blog/2011/07/jquery_fundamentals.html&#34; title=&#34;jQuery设计思想&#34;&gt;jQuery设计思想&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及&lt;a href=&#34;https://www.jquery123.com/&#34; title=&#34;jQuery API 中文文档&#34;&gt;jQuery API 中文文档&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>JS函数的执行时机</title>
      <link>https://juncham.github.io/post/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Fri, 08 May 2020 00:24:14 +0800</pubDate>
      
      <guid>https://juncham.github.io/post/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      
        <description>&lt;h2 id=&#34;关于js函数的调用时机&#34;&gt;关于JS函数的调用时机&lt;/h2&gt;
&lt;p&gt;通常来说是按代码的执行顺序进行执行的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;let i = 0
for(i = 0; i&amp;lt;6; i++){
  setTimeout(()=&amp;gt;{
    console.log(i)
  },0)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码会打出6个6，而不是1，2，3，4，5。这是因为setTimeout表示这个代码运行完毕之后尽快执行。前提是这个for语句执行完再去做，
也就是说，执行完了，这个唯一的i变成了6，退出了for循环之后执行，那就是6个6了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;for (let i = 0; i&amp;lt;6; i++){
  setTimeout(()=&amp;gt;{
    console.log(i)
  },0)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码则会打印出 0、1、2、3、4、5 ，这是因为JS为了满足新手的幻想，在for循环里面每一次都新添加了一个i（i不唯一了），所以分别对应的打出了那个i。&lt;/p&gt;
&lt;p&gt;这里的setTime意义不大了。&lt;/p&gt;
&lt;p&gt;另外还有以下三种方式可以达到上面的效果。&lt;/p&gt;
&lt;p&gt;1、闭包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;let i 
for(i = 0; i&amp;lt;6; i++){
  !function(j){
      setTimeout(()=&amp;gt;{
        console.log(j)
      },0)
  }(i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、利用 setTimeout 的第三个参数,将i传进去&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;let i
for(i = 0; i&amp;lt;6; i++){
    setTimeout((value)=&amp;gt;{
      console.log(value)
    },0,i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3、利用 const 关键字&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;let i
for(i = 0; i&amp;lt;6; i++){
    const x = i
    setTimeout(()=&amp;gt;{
      console.log(x)
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;const声明 创建了一个值的只读引用，固定了每一个新出现的i，但是因为引用的内容i是可变的，于是可以不断变换x的值.&lt;/p&gt;
&lt;h2 id=&#34;关于this&#34;&gt;关于this&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;let person = {
name: &amp;#39;frank&amp;#39;,
sayHi(    ){
console.log(`你好，我叫 ` + this.name)
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;person.sayHi()&lt;/p&gt;
&lt;p&gt;相当于&lt;/p&gt;
&lt;p&gt;person.sayHi(person)&lt;/p&gt;
&lt;p&gt;this代表了将要用到的未知称呼的变量，将其传给了代码里面的this，然后this又传给了要用到它的函数。&lt;/p&gt;
&lt;p&gt;两种调用方法：&lt;/p&gt;
&lt;p&gt;小白调用法：&lt;/p&gt;
&lt;p&gt;person.sayHi()&lt;/p&gt;
&lt;p&gt;person自动传到函数里面，作为this。&lt;/p&gt;
&lt;p&gt;大师调用法：&lt;/p&gt;
&lt;p&gt;person.sayHi。call(person),手动传入person。&lt;/p&gt;
&lt;p&gt;this的两种使用方法：&lt;/p&gt;
&lt;p&gt;隐式传递：&lt;/p&gt;
&lt;p&gt;fn(1,2)  //相当于fn.call(unefined,1,2)，如果不添加undefined，就会被传给this，fn得到的就只有2。&lt;/p&gt;
&lt;p&gt;obj.child.fn(1) //相当于obj.fn.call(obj.child,1)&lt;/p&gt;
&lt;p&gt;显式传递：&lt;/p&gt;
&lt;p&gt;fn.call(undefined,1,2)&lt;/p&gt;
&lt;p&gt;fn.apply(undefined,[1,2])&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>JS对象基本用法</title>
      <link>https://juncham.github.io/post/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 27 Mar 2020 09:14:18 +0800</pubDate>
      
      <guid>https://juncham.github.io/post/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      
        <description>&lt;h1 id=&#34;js-对象基本用法&#34;&gt;JS 对象基本用法&lt;/h1&gt;
&lt;p&gt;七种数据类型：四基两空一对象（number string bool symbol；null undefined；object）。&lt;/p&gt;
&lt;p&gt;五个falsy值：null，undefined，0，NaN，&amp;rsquo;&amp;rsquo;&lt;/p&gt;
&lt;p&gt;对象是无序的数据集合，没有固定顺序，是键值对的集合，例如&#39;name&amp;rsquo;:&amp;lsquo;666&amp;rsquo;，name是键，666是它的值，他们成对是一个对象。&lt;/p&gt;
&lt;h2 id=&#34;声明对象的两种语法&#34;&gt;声明对象的两种语法&lt;/h2&gt;
&lt;p&gt;let obj = {&amp;lsquo;name&amp;rsquo;: &amp;lsquo;666&amp;rsquo;, &amp;lsquo;work&amp;rsquo;:&amp;lsquo;BAT&amp;rsquo;} (非正式写法)&lt;/p&gt;
&lt;p&gt;let obj = new Object({&amp;lsquo;name&amp;rsquo;: &amp;lsquo;666&amp;rsquo;, &amp;lsquo;work&amp;rsquo;:&amp;lsquo;BAT&amp;rsquo;})  (正式写法)&lt;/p&gt;
&lt;p&gt;键名是字符串，可以使任意符号，包括表情。&lt;/p&gt;
&lt;p&gt;每个key都是对象的属性名，每个value都是对象的属性值（上面所说的值）。&lt;/p&gt;
&lt;p&gt;let p1=&#39;name&amp;rsquo;&lt;/p&gt;
&lt;p&gt;let obj ={p1:&amp;lsquo;666&amp;rsquo;}  这里的属性名是p1；&lt;/p&gt;
&lt;p&gt;let obj ={[p1]:&amp;lsquo;666&amp;rsquo;}  这里的属性名是变量p1；&lt;/p&gt;
&lt;p&gt;两个p1其实是不一样的东西。&lt;/p&gt;
&lt;h2 id=&#34;如何删除对象的属性&#34;&gt;如何删除对象的属性&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;p&gt;delete obj.name  或者  delete obj[&amp;lsquo;name&amp;rsquo;]&lt;/p&gt;
&lt;p&gt;要区分没有属性名和属性名的值undefined&lt;/p&gt;
&lt;p&gt;没有属性名：&amp;lsquo;name&amp;rsquo; in obj ===false&lt;/p&gt;
&lt;p&gt;属性名的值undefined(有属性但是还没赋予值): obj.name === undefined&lt;/p&gt;
&lt;h2 id=&#34;如何查看对象的属性&#34;&gt;如何查看对象的属性&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;p&gt;查看自身所有属性：Object.keys(obj)&lt;/p&gt;
&lt;p&gt;查看自身所有属性+公有属性： console.dir（obj）&lt;/p&gt;
&lt;p&gt;判断一个属性是否是自身所有属性：obj.hasOwnProperty(&amp;lsquo;toString&amp;rsquo;)&lt;/p&gt;
&lt;p&gt;原型是一个代表着（存着）对象的公有属性的对象。正常情况下一个对象的原型的原型是null。&lt;/p&gt;
&lt;p&gt;&amp;lsquo;name&amp;rsquo; in obj表示查看obj 里面的&#39;name&#39;的所有属性，而obj.hasOwnProperty(&amp;lsquo;name&amp;rsquo;) 是查看obj的name是不是自身所有的属性。&lt;/p&gt;
&lt;p&gt;查看属性的两种方法：&lt;/p&gt;
&lt;p&gt;obj[&amp;lsquo;key&amp;rsquo;]&lt;/p&gt;
&lt;p&gt;obj.key&lt;/p&gt;
&lt;p&gt;上面两者是等价的，推荐使用第一种，熟练之后再第二种，因为其实第二种的obj是字符串。
而obj[key]求的是变量key的值的属性。
也就是说：&lt;/p&gt;
&lt;p&gt;let &amp;lsquo;key&amp;rsquo;：&amp;lsquo;666&amp;rsquo;&lt;/p&gt;
&lt;p&gt;obj[key] ===obj[&amp;lsquo;666&amp;rsquo;]&lt;/p&gt;
&lt;h2 id=&#34;如何修改或增加对象的属性&#34;&gt;如何修改或增加对象的属性&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;h3 id=&#34;直接赋值&#34;&gt;直接赋值：&lt;/h3&gt;
&lt;p&gt;let obj = {name:&amp;lsquo;666&amp;rsquo;}&lt;/p&gt;
&lt;p&gt;obj.name= &amp;lsquo;666&amp;rsquo;&lt;/p&gt;
&lt;p&gt;obj[&amp;lsquo;name&amp;rsquo;]=&#39;666&amp;rsquo;&lt;/p&gt;
&lt;h3 id=&#34;批量赋值&#34;&gt;批量赋值：&lt;/h3&gt;
&lt;p&gt;Object.assign(obj,{name:&amp;lsquo;666&amp;rsquo;,work:&amp;lsquo;BAT&amp;rsquo;})&lt;/p&gt;
&lt;p&gt;修改一个对象的共有属性例如：obj.toString=&#39;666&amp;rsquo;，并不会影响其他对象的共有属性，而是单独给了obj一个toString一个‘666’，但是其实obj的共有属性还在。&lt;/p&gt;
&lt;p&gt;如果非要改，那就是obj.&lt;strong&gt;proto&lt;/strong&gt;.toString = &amp;lsquo;666&amp;rsquo; 或者 Object.prototype.toString=&#39;666&amp;rsquo;&lt;/p&gt;
&lt;p&gt;但是通常不会这样做，因为会影响其他对象。&lt;/p&gt;
&lt;p&gt;修改一个对象的原型语法：&lt;/p&gt;
&lt;p&gt;obj.&lt;strong&gt;proto&lt;/strong&gt; =common&lt;/p&gt;
&lt;p&gt;let obj = Object.create(common)&lt;/p&gt;
&lt;p&gt;例如obj.&lt;strong&gt;proto&lt;/strong&gt; = null 就直接抹掉了obj的原型（所有共有属性一口气凉凉）。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>JS的基本语法</title>
      <link>https://juncham.github.io/post/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 15 Mar 2020 21:07:54 +0800</pubDate>
      
      <guid>https://juncham.github.io/post/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      
        <description>&lt;h1 id=&#34;js的基本语法&#34;&gt;JS的基本语法&lt;/h1&gt;
&lt;h2 id=&#34;js的表达式和语句的区别&#34;&gt;js的表达式和语句的区别&lt;/h2&gt;
&lt;p&gt;js的表达式通常有值，语句可能有也可能没有。&lt;/p&gt;
&lt;p&gt;add（1.2）表达式的值是函数的返回值，&lt;/p&gt;
&lt;p&gt;console.log（3）虽然会返回3，但是3只是这个语句的表达，它的值是undefined。&lt;/p&gt;
&lt;p&gt;语句通常会改变环境，声明某个对象或者赋值。以上区别也不是绝对的。&lt;/p&gt;
&lt;p&gt;JS要注意区分大小写。&lt;/p&gt;
&lt;p&gt;js里面空格通常没有意义，除非影响断句。但是return后面不能跟空格，而且return后面不加东西，或者空格，或者命令在下一行就会自动添加undefined，这个要注意。&lt;/p&gt;
&lt;h2 id=&#34;标识符的规则&#34;&gt;标识符的规则：&lt;/h2&gt;
&lt;p&gt;标识符是给对象或者变量取名字的时候需要用到的符号，第一个标识符可以Unicode字母、_、中文等等。后面的标识符运用时可以涵盖数字。&lt;/p&gt;
&lt;p&gt;代码写注释尽可能精简，无关或者易懂的不必中文注释以防遮蔽了重要信息。&lt;/p&gt;
&lt;p&gt;{}把语句变成一块,当只有简单一句代码的时候可以省略。&lt;/p&gt;
&lt;h2 id=&#34;if-else语句&#34;&gt;if else语句&lt;/h2&gt;
&lt;p&gt;标准写法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-coding&#34; data-lang=&#34;coding&#34;&gt;if (表达式n){
语句a
} else if (表达式){
         语句
}        else {
         语句
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;虽然{}可以省略，但是省略的时候，if和else的判定只包含最近的一个语句，如果有两个语句，第二个就不受if管了（缩进）。&lt;/p&gt;
&lt;p&gt;n&amp;gt;0 ? a :b&lt;/p&gt;
&lt;p&gt;n&amp;gt;0 &amp;amp;&amp;amp; a&lt;/p&gt;
&lt;p&gt;&amp;amp;&amp;amp;短路逻辑：A&amp;amp;&amp;amp;B,如果A是真，则需要继续判断后面，如果A是假，那后面也没必要管真假了。&lt;/p&gt;
&lt;p&gt;a || b等价于：&lt;/p&gt;
&lt;p&gt;if（！a）{b}&lt;/p&gt;
&lt;p&gt;要么a，要么b。a=a|| 100，保底值写法。&lt;/p&gt;
&lt;h2 id=&#34;switchcase语句&#34;&gt;switch，case语句&lt;/h2&gt;
&lt;p&gt;跟if，else语句类似，case之间需要用break隔开，不然会一直贯穿判定。&lt;/p&gt;
&lt;h2 id=&#34;while-for语句&#34;&gt;while for语句&lt;/h2&gt;
&lt;h3 id=&#34;while语句&#34;&gt;while语句：&lt;/h3&gt;
&lt;p&gt;while（表达式a）{语句b}&lt;/p&gt;
&lt;p&gt;a为真，执行b，然后再判断a的真假。如果（直到）a为假，跳出循环（去执行其他语句）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juncham.github.io/images/while%E8%AF%AD%E5%8F%A5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;以上四者缺一不可，缺少初始化无法开始，另外三个缺失会造成死循环。&lt;/p&gt;
&lt;h3 id=&#34;for语句&#34;&gt;for语句：&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-coding&#34; data-lang=&#34;coding&#34;&gt;for（语句1；表达式2；语句3）{
循环体
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先执行语句1（初始化，有且只有一次），然后判断表达式2（判定），2为真，执行循环体，然后3（增长）；2为假，跳出循环，去执行其他语句。&lt;/p&gt;
&lt;p&gt;break在循环体中，触发之后直接跳出for语句，但是只退出最近的一个for，而continue在循环体中，触发之后就直接跳过，执行下一个判定。&lt;/p&gt;
&lt;h2 id=&#34;label&#34;&gt;label：&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-coding&#34; data-lang=&#34;coding&#34;&gt;{
foo：1
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是个代码块，标签里面是1。不是对象。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>JavaScript的诞生</title>
      <link>https://juncham.github.io/post/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Sat, 07 Mar 2020 23:56:47 +0800</pubDate>
      
      <guid>https://juncham.github.io/post/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      
        <description>&lt;h2 id=&#34;javascript-的诞生&#34;&gt;JavaScript 的诞生&lt;/h2&gt;
&lt;p&gt;李爵士发明了HTML,赖先生发明了CSS，布兰登发明了JS，今天来说说JS的诞生。&lt;/p&gt;
&lt;p&gt;布兰登是物理学转数学与计算机学，工作七年负责系统与网络开发，又三年负责为内核与电子信号处理。1995年进入网景公司。&lt;/p&gt;
&lt;p&gt;网景公司在1994年发布了Navigator浏览器0.9版，是历史上第一个比较成熟的网络浏览器，但是只能浏览，没有互动，于是网景继续一种网页脚本语言来满足这项功能。网景公司当时有两个选择：一个是采用现有的语言，比如Perl、Python、Tcl、Scheme等等，允许它们直接嵌入网页；另一个是发明一种全新的语言。&lt;/p&gt;
&lt;p&gt;这两个选择各有利弊。第一个选择，有利于充分利用现有代码和程序员资源，推广起来比较容易；第二个选择，有利于开发出完全适用的语言，实现起来比较容易。&lt;/p&gt;
&lt;p&gt;就当网景难以抉择的时候，Sun公司推出了Java，于是网景就想跟Sun合作，蹭Java热度，因此让布兰登设计一个与Java足够相似，但又比较简单易上手的语言。而布兰登对Java没有兴趣，出于应付工作，他十天完成了Javascript的设计。&lt;/p&gt;
&lt;p&gt;他的思路大致是：&lt;/p&gt;
&lt;p&gt;（1）借鉴C语言的基本语法；&lt;/p&gt;
&lt;p&gt;（2）借鉴Java语言的数据类型和内存管理；&lt;/p&gt;
&lt;p&gt;（3）借鉴Scheme语言，将函数提升到&amp;quot;第一等公民&amp;rdquo;（first class）的地位；&lt;/p&gt;
&lt;p&gt;（4）借鉴Self语言，使用基于原型（prototype）的继承机制。&lt;/p&gt;
&lt;p&gt;因此Javascript语言实际上是两种语言风格的混合产物——（简化的）函数式编程+（简化的）面向对象编程。&lt;/p&gt;
&lt;p&gt;JS存在了很多问题，一方面是布兰登的应付与设计额仓促，另一方面是JS的标准化过早。1995年10月解释器开发成功，12月发布，然后立即受到了使用者的广泛接受，&lt;/p&gt;
&lt;p&gt;用户爆发式增长。大量的既成网页和业余网页设计者的参与，使得调整语言规格困难重重。1996年8月，微软公司强势介入，宣布推出自己的脚本语言Jscript；11月，为了压制微软，网景公司决定申请Javascript的国际标准；1997年6月，第一个国际标准ECMA-262正式颁布。
这些原因导致了JS存在了许多问题。&lt;/p&gt;
&lt;p&gt;以上内容主要参考自:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html&#34; title=&#34;JavaScript诞生记&#34;&gt;JavaScript诞生记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html&#34; title=&#34;JavaScript的十个设计缺陷&#34;&gt;JavaScript的十个设计缺陷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感觉易上手这一特点给JavaScript带来了机遇，虽然出生得很简陋，但是却因为行业的新兴，缺乏同类产品，易上手等优点使得JS早早占领了
网页爱好者的喜爱，无中生有了受众。感觉就像乔布斯所说的，顾客并不知道自己想要什么，直到你把产品摆在了他面前。&lt;/p&gt;
&lt;p&gt;PS：我们在编程和设计的时候也可以考虑我们日常的思考方式，如何记忆上一次的成绩，按什么作为标记这些日常的思维方式也可以迁移到编程当中去。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>https://juncham.github.io/post/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Fri, 28 Feb 2020 10:49:32 +0800</pubDate>
      
      <guid>https://juncham.github.io/post/%E6%B5%85%E6%9E%90url/</guid>
      
        <description>&lt;h2 id=&#34;浅析url&#34;&gt;浅析URL&lt;/h2&gt;
&lt;h2 id=&#34;url&#34;&gt;URL&lt;/h2&gt;
&lt;p&gt;URL：统一资源定位符（Uniform Resource Locator），标准格式如下：&lt;/p&gt;
&lt;p&gt;以https://zh.wikipedia.org:80/w/index.php?title=Special:随机页面为例, 其中：&lt;/p&gt;
&lt;p&gt;1.https，是协议；&lt;/p&gt;
&lt;p&gt;2.zh.wikipedia.org，是服务器；&lt;/p&gt;
&lt;p&gt;3.80，是服务器上的网络端口号；&lt;/p&gt;
&lt;p&gt;4./w/index.php，是路径；&lt;/p&gt;
&lt;p&gt;5.?title=Special:随机页面，是询问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juncham.github.io/images/URL.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;大多数网页浏览器不要求用户输入网页中“https://”的部分，因为绝大多数网页内容是超文本传输协议文件。同样，“80”是超文本传输协议文件的常用端口号，因此一般也不必写明。一般来说用户只要键入统一资源定位符的一部分&lt;/p&gt;
&lt;h2 id=&#34;dns&#34;&gt;DNS&lt;/h2&gt;
&lt;p&gt;DNS：域名系统（Domain Name System），它作为一个分布式数据库将域名和IP地址相互联系起来。IP用来定位一个设备，端口用来定位一个设备等的服务的。两者缺一不可。&lt;/p&gt;
&lt;p&gt;nsloookup主要是用于查询DNS的信息，常用方法见：
&lt;a href=&#34;https://www.jianshu.com/p/21dde6f7ce07&#34;&gt;https://www.jianshu.com/p/21dde6f7ce07&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;執行 nslookup 時可以直接在後面跟著我們要查詢的資料, 那麼 nslookup 會直接把結果傳回來。&lt;/p&gt;
&lt;p&gt;如果只打入 nslookup [enter], 則進入交談模式, 出現提示符號 &amp;gt;, 此時 nslookup 會等待 user input command.&lt;/p&gt;
&lt;p&gt;详细参考：http://faculty.ndhu.edu.tw/~comput/computer_c/training/hbc0122/dns-1.htm&lt;/p&gt;
&lt;h2 id=&#34;ip&#34;&gt;IP&lt;/h2&gt;
&lt;p&gt;ping加一个域名，可以得到该服务器的IP，IP主要是定位一个设备。域名就是IP，一个域名可以对应不同IP，负载均衡，防止过载。一个IP可以对应等多个不同的域名，共享主机，穷开发者会这样。域名通常有三种，com是顶级域名，qq.com是二级域名（俗称一级域名），www.qq.com（俗称二级），跟前者是父子关系。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>CSS知识总结</title>
      <link>https://juncham.github.io/post/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 26 Feb 2020 21:20:32 +0800</pubDate>
      
      <guid>https://juncham.github.io/post/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      
        <description>&lt;h1 id=&#34;css知识总结&#34;&gt;CSS知识总结&lt;/h1&gt;
&lt;p&gt;最近学习了CSS动画的制作。&lt;/p&gt;
&lt;p&gt;今天的博客主要包括两个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;浏览器渲染原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSS 动画的两种做法（transition 和 animation)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;浏览器渲染原理&#34;&gt;浏览器渲染原理&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;浏览器将获取的HTML文档解析成DOM树。&lt;/li&gt;
&lt;li&gt;处理CSS标记，构成层叠样式表模型CSSOM(CSS Object Model)。&lt;/li&gt;
&lt;li&gt;将DOM和CSSOM合并为渲染树(rendering tree)将会被创建，代表一系列将被渲染的对象。&lt;/li&gt;
&lt;li&gt;渲染树的每个元素包含的内容都是计算过的，它被称之为布局layout。浏览器使用一种流式处理的方法，只需要一次绘制操作就可以布局所有的元素。&lt;/li&gt;
&lt;li&gt;将渲染树的各个节点绘制到屏幕上，这一步被称为绘制painting。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作者：oWSQo&lt;/p&gt;
&lt;p&gt;链接：https://www.jianshu.com/p/e6252dc9be32&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;最后还有一个步骤：Compose,根据层叠关系展示画面。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://juncham.github.io/images/%E6%B8%B2%E6%9F%93%E6%A0%91.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;渲染的流程与一些环节的改动有关，例如删除了某个div造成排版的重新改变，这个时候以上流程的每一步都需要进行，有时候只是改变了背景颜色，其他布局不变，那么久直接跳过了layout，如果只是改变了某些样式，例如transform，就可以跳过layout和paint，直接合成。&lt;/p&gt;
&lt;p&gt;渲染的更新需要在全屏查看效果，在iframe里面看有问题。&lt;/p&gt;
&lt;h2 id=&#34;css动画制作&#34;&gt;CSS动画制作&lt;/h2&gt;
&lt;p&gt;CSS的transform命令可以对元素进行旋转，缩放，倾斜或平移操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;位移translate，通常X/Y/Z代表坐标系里各方向上的平移。也可以用三个数字分别进行表示，不表示的可以不写。&lt;/li&gt;
&lt;li&gt;缩放scale，一位数表示整体缩放，两位数分别表示X/Y上各自的缩放倍数。&lt;/li&gt;
&lt;li&gt;旋转rotate，以度数表示。&lt;/li&gt;
&lt;li&gt;倾斜skew，这个涉及立体上的角度，给定定位点可以更加具体的展示元素的倾斜情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;transition制作动画&#34;&gt;transition制作动画&lt;/h3&gt;
&lt;p&gt;transition主要是为给定的两个点补充中间帧。&lt;/p&gt;
&lt;p&gt;语法：transition：属性名 时长 过度方式 延时时长&lt;/p&gt;
&lt;p&gt;通常后面延时比较少用。也不是所有属性都能过度，需要透明度（opacity）、背景等等额改变最好作明确的编码表达。&lt;/p&gt;
&lt;h2 id=&#34;animation制作动画&#34;&gt;animation制作动画&lt;/h2&gt;
&lt;p&gt;语法1：@keyframe 元素id{n% {相应命令}}&lt;/p&gt;
&lt;p&gt;语法2：@keyframe form{相应命令} to{相应命令}&lt;/p&gt;
&lt;p&gt;附带两个自制动画链接：&lt;/p&gt;
&lt;p&gt;transition: &lt;a href=&#34;http://js.jirengu.com/javil/1/watch?html,css,output&#34;&gt;http://js.jirengu.com/javil/1/watch?html,css,output&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;animation: &lt;a href=&#34;http://js.jirengu.com/feyev/1/watch?html,css,output&#34;&gt;http://js.jirengu.com/feyev/1/watch?html,css,output&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>HTML常用标签1</title>
      <link>https://juncham.github.io/post/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE1/</link>
      <pubDate>Tue, 04 Feb 2020 22:41:42 +0800</pubDate>
      
      <guid>https://juncham.github.io/post/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE1/</guid>
      
        <description>&lt;h1 id=&#34;html常用标签&#34;&gt;HTML常用标签&lt;/h1&gt;
&lt;h2 id=&#34;a标签&#34;&gt;a标签&lt;/h2&gt;
&lt;p&gt;很常用，通常是跳转到内部页面或者外部页面，或者手机或邮箱。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; href是hyer与reference的结合，超链接，可以在当前网页打开相应的链接。可以打开http、htttps、或者直接以//开头的网页，后者是默认最高级会逐级跳转。&lt;/p&gt;
&lt;p&gt;添加tel+手机号码，如果是在打开可以直接呼唤号码。&lt;/p&gt;
&lt;p&gt;添加mailto+邮箱，可以直接跳转到发邮件。&lt;/p&gt;
&lt;p&gt;另外添加目录也可以跳转，html里面/默认是当前的文件是根目录。&lt;/p&gt;
&lt;p&gt;javascript伪协议写法，&lt;!-- raw HTML omitted --&gt;按钮&lt;!-- raw HTML omitted --&gt;。代码是对应想要的代码，如果想要点击之后毫无反应就什么都不写。&lt;/p&gt;
&lt;p&gt;也可以跳转相应的id，id=xxx&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;决定链接在何处打开，其中&lt;/p&gt;
&lt;p&gt;1 _blank 是在新的空白页面打开&lt;/p&gt;
&lt;p&gt;2 _top 在上层页面打开&lt;/p&gt;
&lt;p&gt;3 _parent 在当前连接所在的上层打开&lt;/p&gt;
&lt;p&gt;4 _self 在当前链接打开&lt;/p&gt;
&lt;p&gt;如果是target=xxx，则会创建新的窗口自动命名xxx并打开。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; 下载对应的网页，有可能不支持&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; 防止某些bug，以后会说到&lt;/p&gt;
&lt;h2 id=&#34;img标签&#34;&gt;img标签&lt;/h2&gt;
&lt;p&gt;作用是发出get请求，展示一张图片。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;gt;等号后面接图片的地址，可以是网络上的地址也可以是目录里面的。
alt：替换的，或者可选择的。通常是图片加载失败就替换展示的图片（eg：404）。&lt;/p&gt;
&lt;p&gt;width、height：宽度和高度，只写一个另一个就自动对应变化。如果不对应就可能图片变形。如果加载超过页面宽高就填写100%（响应式）。&lt;/p&gt;
&lt;p&gt;onload、onerror：用于监听图片是否加载成功。写在img命令的下面，用script包含着。&lt;/p&gt;
&lt;p&gt;对应名称.onload=funcion&lt;/p&gt;
&lt;p&gt;console.log(&amp;lsquo;图片加载成功&amp;rsquo;)&lt;/p&gt;
&lt;p&gt;xxx.src=yyy路径  进行补救&lt;/p&gt;
&lt;h2 id=&#34;table标签&#34;&gt;table标签&lt;/h2&gt;
&lt;p&gt;主要用于制作表格。里面通常只包含thead、tbody、tfoot三个标签。但是彼此之间调换顺序并无影响。这三者里面包含tr（row，行）里面包含th（thead缩写、作表头），td（data，内容）。&lt;/p&gt;
&lt;p&gt;如果需要首行和首列都是表头，可以在tbody里面第一个使用th，后面内容td，如此类推。&lt;/p&gt;
&lt;h3 id=&#34;table的相关样式&#34;&gt;table的相关样式&lt;/h3&gt;
&lt;p&gt;table-layout：auto就自动按内容决定行列距，fixed就各行列平均，由第一列或第一行的宽度决定。&lt;/p&gt;
&lt;p&gt;border：10px，solid，red。就是表格间相距10像素，实线，红色。&lt;/p&gt;
&lt;p&gt;table-spacing：表格之间的距离。&lt;/p&gt;
&lt;p&gt;table-collapse：表格距离的合并，spacing=0时就是常见的Excel那样。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://juncham.github.io/post/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Tue, 04 Feb 2020 22:29:44 +0800</pubDate>
      
      <guid>https://juncham.github.io/post/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      
        <description>&lt;h1 id=&#34;html常用标签&#34;&gt;HTML常用标签&lt;/h1&gt;
&lt;h2 id=&#34;a标签&#34;&gt;a标签&lt;/h2&gt;
&lt;p&gt;很常用，通常是跳转到内部页面或者外部页面，或者手机或邮箱。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; href是hyer与reference的结合，超链接，可以在当前网页打开相应的链接。可以打开http、htttps、或者直接以//开头的网页，后者是默认最高级会逐级跳转。&lt;/p&gt;
&lt;p&gt;添加tel+手机号码，如果是在打开可以直接呼唤号码。&lt;/p&gt;
&lt;p&gt;添加mailto+邮箱，可以直接跳转到发邮件。&lt;/p&gt;
&lt;p&gt;另外添加目录也可以跳转，html里面/默认是当前的文件是根目录。&lt;/p&gt;
&lt;p&gt;javascript伪协议写法，&lt;!-- raw HTML omitted --&gt;按钮&lt;!-- raw HTML omitted --&gt;。代码是对应想要的代码，如果想要点击之后毫无反应就什么都不写。&lt;/p&gt;
&lt;p&gt;也可以跳转相应的id，id=xxx&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;决定链接在何处打开，其中&lt;/p&gt;
&lt;p&gt;1 _blank 是在新的空白页面打开&lt;/p&gt;
&lt;p&gt;2 _top 在上层页面打开&lt;/p&gt;
&lt;p&gt;3 _parent 在当前连接所在的上层打开&lt;/p&gt;
&lt;p&gt;4 _self 在当前链接打开&lt;/p&gt;
&lt;p&gt;如果是target=xxx，则会创建新的窗口自动命名xxx并打开。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; 下载对应的网页，有可能不支持&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; 防止某些bug，以后会说到&lt;/p&gt;
&lt;h2 id=&#34;img标签&#34;&gt;img标签&lt;/h2&gt;
&lt;p&gt;作用是发出get请求，展示一张图片。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;gt;等号后面接图片的地址，可以是网络上的地址也可以是目录里面的。
alt：替换的，或者可选择的。通常是图片加载失败就替换展示的图片（eg：404）。&lt;/p&gt;
&lt;p&gt;width、height：宽度和高度，只写一个另一个就自动对应变化。如果不对应就可能图片变形。如果加载超过页面宽高就填写100%（响应式）。&lt;/p&gt;
&lt;p&gt;onload、onerror：用于监听图片是否加载成功。写在img命令的下面，用script包含着。&lt;/p&gt;
&lt;p&gt;对应名称.onload=funcion&lt;/p&gt;
&lt;p&gt;console.log(&amp;lsquo;图片加载成功&amp;rsquo;)&lt;/p&gt;
&lt;p&gt;xxx.src=yyy路径  进行补救&lt;/p&gt;
&lt;h2 id=&#34;table标签&#34;&gt;table标签&lt;/h2&gt;
&lt;p&gt;主要用于制作表格。里面通常只包含thead、tbody、tfoot三个标签。但是彼此之间调换顺序并无影响。这三者里面包含tr（row，行）里面包含th（thead缩写、作表头），td（data，内容）。&lt;/p&gt;
&lt;p&gt;如果需要首行和首列都是表头，可以在tbody里面第一个使用th，后面内容td，如此类推。&lt;/p&gt;
&lt;h3 id=&#34;table的相关样式&#34;&gt;table的相关样式&lt;/h3&gt;
&lt;p&gt;table-layout：auto就自动按内容决定行列距，fixed就各行列平均，由第一列或第一行的宽度决定。&lt;/p&gt;
&lt;p&gt;border：10px，solid，red。就是表格间相距10像素，实线，红色。&lt;/p&gt;
&lt;p&gt;table-spacing：表格之间的距离。&lt;/p&gt;
&lt;p&gt;table-collapse：表格距离的合并，spacing=0时就是常见的Excel那样。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>https://juncham.github.io/post/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Tue, 04 Feb 2020 22:22:12 +0800</pubDate>
      
      <guid>https://juncham.github.io/post/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      
        <description>&lt;h1 id=&#34;html-入门笔记-1&#34;&gt;HTML 入门笔记 1&lt;/h1&gt;
&lt;p&gt;终于开始做网页啦，虽然听课的时候比较好懂，但是一到要把每个标签之类的写出来感觉还是难的。主要分为 HTML 的起源、起手、章节标签、全局属性、内容标签。&lt;/p&gt;
&lt;h2 id=&#34;html-的起源&#34;&gt;HTML 的起源&lt;/h2&gt;
&lt;p&gt;HTML 源自于李博士的天才捣弄，他依据网址搞出了 URL，根据网页搞出了 HTML，为了让两者更加完善，cd搞出了 HTTP。&lt;/p&gt;
&lt;h2 id=&#34;html-的起手&#34;&gt;HTML 的起手&lt;/h2&gt;
&lt;p&gt;感叹号开局，emmet abbreviation 那个选项。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;zh-CN&amp;#34;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;
    &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;
    &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34; /&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一行表示文件类型是 html。&lt;/p&gt;
&lt;p&gt;lang 代表语言，这里 zh-CN 表示简体中文。&lt;/p&gt;
&lt;p&gt;UTF-8 兼容人类所有的语言，后面几行主要是防止网页的缩放，感觉以后会在博客写到的。&lt;/p&gt;
&lt;h2 id=&#34;章节标签&#34;&gt;章节标签&lt;/h2&gt;
&lt;p&gt;h1~h6 表示各级大小的标题，同数字之间可以并列使用。&lt;/p&gt;
&lt;p&gt;section 表示新的章节，里面可以使用下一级 hn。&lt;/p&gt;
&lt;p&gt;p 表示一段话。&lt;/p&gt;
&lt;p&gt;article 表示文章&lt;/p&gt;
&lt;p&gt;main 主要内容&lt;/p&gt;
&lt;p&gt;aside 旁支内容&lt;/p&gt;
&lt;p&gt;div 划分段落&lt;/p&gt;
&lt;h2 id=&#34;全局属性&#34;&gt;全局属性&lt;/h2&gt;
&lt;p&gt;全局属性是指所有的标签都可以有的属性。&lt;/p&gt;
&lt;p&gt;主要包括：class、contenteditable、hidden、id、style、tabindex、title.&lt;/p&gt;
&lt;p&gt;其中没事就别用 id,虽然它表示是唯一的，但是你不能确保它是唯一的，而却出现 bug 并不会报错。&lt;/p&gt;
&lt;h2 id=&#34;内容标签&#34;&gt;内容标签&lt;/h2&gt;
&lt;p&gt;ol+il 有顺序的列表&lt;/p&gt;
&lt;p&gt;ul+il 没有顺序的列表&lt;/p&gt;
&lt;p&gt;dl+dd+dt dl 描述列表，dt 描述对象，dd 描述内容。&lt;/p&gt;
&lt;p&gt;pre 所包含的内容如实呈现（多个空格，多个回车等）&lt;/p&gt;
&lt;p&gt;a 用于添加网页链接&lt;/p&gt;
&lt;p&gt;em 强调，重于语气，通常斜体表示，可以修改表现形式。&lt;/p&gt;
&lt;p&gt;strong 强调，重于内容，通常加粗表示，同上。&lt;/p&gt;
&lt;p&gt;code 用于表示计算机源代码等。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>HTML入门笔记1.1</title>
      <link>https://juncham.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01.1/</link>
      <pubDate>Sun, 02 Feb 2020 21:18:51 +0800</pubDate>
      
      <guid>https://juncham.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01.1/</guid>
      
        <description>&lt;h1 id=&#34;html-入门笔记-1&#34;&gt;HTML 入门笔记 1&lt;/h1&gt;
&lt;p&gt;终于开始做网页啦，虽然听课的时候比较好懂，但是一到要把每个标签之类的写出来感觉还是难的。主要分为 HTML 的起源、起手、章节标签、全局属性、内容标签。&lt;/p&gt;
&lt;h2 id=&#34;html-的起源&#34;&gt;HTML 的起源&lt;/h2&gt;
&lt;p&gt;HTML 源自于李博士的天才捣弄，他依据网址搞出了 URL，根据网页搞出了 HTML，为了让两者更加完善，搞出了 HTTP。&lt;/p&gt;
&lt;h2 id=&#34;html-的起手&#34;&gt;HTML 的起手&lt;/h2&gt;
&lt;p&gt;感叹号开局，emmet abbreviation 那个选项。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;zh-CN&amp;#34;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;
    &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;
    &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34; /&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一行表示文件类型是 html。
lang 代表语言，这里 zh-CN 表示简体中文。
UTF-8 兼容人类所有的语言，后面几行主要是防止网页的缩放，感觉以后会在博客写到的。&lt;/p&gt;
&lt;h2 id=&#34;章节标签&#34;&gt;章节标签&lt;/h2&gt;
&lt;p&gt;h1~h6 表示各级大小的标题，同数字之间可以并列使用。
section 表示新的章节，里面可以使用下一级 hn。
p 表示一段话。
article 表示文章
main 主要内容
aside 旁支内容
div 划分段落&lt;/p&gt;
&lt;h2 id=&#34;全局属性&#34;&gt;全局属性&lt;/h2&gt;
&lt;p&gt;全局属性是指所有的标签都可以有的属性。
主要包括：class、contenteditable、hidden、id、style、tabindex、title.
其中没事就别用 id,虽然它表示是唯一的，但是你不能确保它是唯一的，而却出现 bug 并不会报错。&lt;/p&gt;
&lt;h2 id=&#34;内容标签&#34;&gt;内容标签&lt;/h2&gt;
&lt;p&gt;ol+il 有顺序的列表
ul+il 没有顺序的列表
dl+dd+dt dl 描述列表，dt 描述对象，dd 描述内容。
pre 所包含的内容如实呈现（多个空格，多个回车等）
a 用于添加网页链接
em 强调，重于语气，通常斜体表示，可以修改表现形式。
strong 强调，重于内容，通常加粗表示，同上。
code 用于表示计算机源代码等。&lt;/p&gt;
&lt;p&gt;今天的内容就到这里啦。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>https://juncham.github.io/post/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Wed, 22 Jan 2020 23:30:00 +0800</pubDate>
      
      <guid>https://juncham.github.io/post/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      
        <description>&lt;h1 id=&#34;大家好&#34;&gt;大家好&lt;/h1&gt;
&lt;p&gt;我的博客开通了，希望我能写出好文章给各位！&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
